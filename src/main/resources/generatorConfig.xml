<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--导入属性配置 -->
    <properties resource="generator.properties"/>
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3">
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--mysql分页插件生成-->
        <plugin type="com.xxg.mybatis.plugins.MySQLLimitPlugin"></plugin>
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${jdbc_driverClass}" connectionURL="${jdbc_url}" userId="${jdbc_user}"
                        password="${jdbc_password}">
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
        targetPackage     指定生成的model生成所在的包名
        targetProject     指定在该项目下所在的路径
    -->
        <javaModelGenerator targetPackage="${modelPackage}" targetProject="src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="${XMLMapperPackage}" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>
        <javaClientGenerator type="XMLMAPPER" targetPackage="${daoPackage}" targetProject="src/main/java">
        </javaClientGenerator>

        <!-- table 举例 -->
        <!--<table tableName="VD_B_test_1" enableCountByExample="false"-->
        <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
        <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
        <!--</table>-->
        <!--生成指定数据库下面的所有表，tableName=%,schema指定库名，jdbcConnection中指定 <property name="nullCatalogMeansCurrent" value="true" /> -->
        <!--<table   schema="test1"   delimitAllColumns="true"  tableName="%" enableCountByExample="false"-->
        <!--enableUpdateByExample="false" enableDeleteByExample="false"-->
        <!--enableSelectByExample="false" selectByExampleQueryId="false">-->
        <!--<property name="constructorBased" value="false"/>-->
        <!--</table>-->
        <table schema="test1" delimitAllColumns="true" tableName="%">
            <property name="constructorBased" value="false"/>
        </table>
    </context>
</generatorConfiguration>
